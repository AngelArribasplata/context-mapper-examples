ContextMap ContextMapper {
	contains LanguageCore, ArchitecturalRefactorings, ServiceCutterAnalysis, ReverseEngineeringLibrary, Generators
	
	/**
	 * Pattern selection:
	 * ==================
	 * 
	 * The language core (CML language) provides a Published Language (PL) allowing to describe software systems
	 * in terms of DDD patterns. This PL is used by the other components. Since its not a public API (REST, Messaging, 
	 * or similar) we haven't added the Open Host Service (OHS) pattern.
	 * 
	 * 
	 * The reverse engineering library conforms to the model provided by the language core (we always generate CML models
	 * according to the core). The generators and Service Cutter integration on the other hand may also influence the language
	 * sometimes.
	 */	
	
	LanguageCore [PL]->[CF] ReverseEngineeringLibrary

	LanguageCore [PL]-> ServiceCutterAnalysis
	
	LanguageCore [PL]-> Generators
	
	/* The refactorings are tightly coupled with the language. In this case the semantic model of the language
	 * can be seen as a Shared Kernel:
	 */
	LanguageCore [SK]<->[SK] ArchitecturalRefactorings
	
}

BoundedContext LanguageCore {
	domainVisionStatement "Provides the Context Mapper DSL (CML) modeling language to express architectures on the basis of Strategic Domain-driven Design (DDD) patterns."
	
	Aggregate StrategicDesign
	
	Aggregate TacticDesign
	
}

BoundedContext ArchitecturalRefactorings {
	domainVisionStatement "Architectural Refactorings (ARs) allow to improve the architecture model iteratively."
	
	Aggregate StructuralRefactorings
	
	Aggregate RelationshipRefactorings
}

BoundedContext ServiceCutterAnalysis {
	domainVisionStatement "The Service Cutter integration into Context Mapper allows to analyze the Context Map with respect to coupling criteria and supports to suggest improved Context Maps."
	
	Aggregate ERDModel // input
	
	Aggregate UserRepresentations // input
	
	Aggregate CouplingCriteria // service decomposition process
	
	Aggregate GraphClusteringAlgorithms // service decomposition process
	
	Aggregate ServiceDecompositions // output

}

BoundedContext ReverseEngineeringLibrary {
	domainVisionStatement "The reverse engineering component can generate CML Context Maps from existing source code. This allows to reverse engineer the architecture model in projects with existing monoliths or microservices."
	
	Aggregate BoundedContextDiscoveryStrategies
	
	Aggregate RelationshipDiscoveryStrategies
}

BoundedContext Generators {
	domainVisionStatement "The generators allow to generate other representations of the architecture derived by a given CML Context Map."
	
	Aggregate GraphicalGenerators

	Aggregate ServiceContractsGenerators // generate (micro-)service generators
	
	Aggregate ServiceCutterGenerators // generate ServiceCutter input files
}
