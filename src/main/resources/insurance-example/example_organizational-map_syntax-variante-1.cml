/* Example Context Map written with 'ContextMapper DSL' */
ContextMap {
	type = ORGANIZATIONAL
	state = TO_BE
	
	/* Add teams to this organizational map: */
	CustomersFrontofficeTeam
	CustomersBackofficeTeam
	ContractsTeam
	ClaimsTeam
	
	/* Define the team relationships */
	CustomersFrontofficeTeam Customer-Supplier CustomersBackofficeTeam 
	
	CustomersBackofficeTeam Upstream-Downstream ContractsTeam {
		upstream implements OPEN_HOST_SERVICE, PUBLISHED_LANGUAGE
	}
	
	ContractsTeam Partnership ClaimsTeam
}

/* Team Definitions */
BoundedContext CustomersBackofficeTeam implements CustomerManagementDomain realizes CustomerManagementContext {
	type = TEAM
	domainVisionStatement = "This team is responsible for implementing the customers module in the back-office system."
}

BoundedContext CustomersFrontofficeTeam implements CustomerManagementDomain realizes CustomerSelfServiceContext {
	type = TEAM
	domainVisionStatement = "This team is responsible for implementing the front-office application for the insurance customers."
}

BoundedContext ContractsTeam implements PolicyManagementDomain {
	type = TEAM
	domainVisionStatement = "This team is responsible for implementing the contract- and policy-management modules in the back-office system."
}

BoundedContext ClaimsTeam implements RiskManagementDomain {
	type = TEAM
	domainVisionStatement = "This team is responsible for for implementing the claims module and providing customer risks information."
}

/* Bounded Context Definitions */
BoundedContext CustomerManagementContext implements CustomerManagementDomain {
	type = FEATURE
	domainVisionStatement = "This Bounded Context manages the insurance companies customers."
	implementationTechnology = "Java, JEE Application"
}
BoundedContext CustomerSelfServiceContext implements CustomerManagementDomain {
	type = APPLICATION
	domainVisionStatement = "Provides the customers of the insurance company a web application for self-service tasks such as change of the address."
	implementationTechnology = "PHP Web Application"
}

/* Subdomain Definitions */
Subdomain CustomerManagementDomain {
	type = CORE_DOMAIN
	
	Entity Customer {
		String firstname
		String familyName
	}
}
Subdomain PolicyManagementDomain {
	type = CORE_DOMAIN
	
	Entity Contract {
		Customer contractCustomer
		Policy policy
	}
	
	Entity Policy {
		long policyNr
	}
}
Subdomain PrintingDomain {
	type = SUPPORTING_DOMAIN
}
Subdomain RiskManagementDomain {
	type = GENERIC_SUBDOMAIN
	domainVisionStatement = "Lorem Ipsum"
	
	Entity CustomerRisks {
		Contract contract
	}
}



